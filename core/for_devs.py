from core.data.SQLite_block import db
import re

from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from core.callbacks.utils.state_machine import SaveSteps
from core.callbacks.utils.keyboards import (get_keyboard_ADDLAMP_DELETE_EDIT_FORDEVS,
                                            get_keyboard_UPDATE_FORDEVS,
                                            get_quit,
                                            get_keyboard_1lvl_branch,
                                            get_keyboard_2lvl_branch,
                                            get_keyboard_CONFIRM,
                                            profile,
                                            add_attr,
                                            get_keyboard_SEARCH)
from core.callbacks.utils.subcategories import SubCategory, SubCategoryFormat

from core.config import PASSWORD


async def for_devs_(message: types.Message, state: FSMContext):
    await message.answer('!–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤!\n\n'
                         '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é',
                         reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
    status = db.user_exists(message.from_user.id)[0][2]
    if status:
        await message.answer('–í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É\n'
                             '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å /start')
        await state.clear()
    else:
        await state.set_state(SaveSteps.GET_PASSWORD)

async def get_password(message: types.Message, state: FSMContext):
    if message.text == PASSWORD:
        db.add_dev(message.from_user.id)
        await message.answer('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —á–∞—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥!')
    else:
        await message.answer('–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ!')
    await state.clear()



"""–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã"""
def DevCheck(func):
    async def wrapper(mes: types.Message, state: FSMContext):
        await state.set_state(SaveSteps.CHECK)
        info = db.user_exists(mes.from_user.id)
        status = info[0][2]
        if status:
            res = await func(mes, state)
            return res
        else:
            await mes.answer('–í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–æ–π–¥–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é /for_devs')
            await state.clear()
    return wrapper
def CancelActivity(func):
    async def wrapper(mes: types.Message, state: FSMContext):
        if mes.text.lower() == '–æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ':
            await mes.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
                             reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
            await state.clear()
        else:
            result = await func(mes, state)
            return result
    return wrapper



"""/ü§£add_lamp"""
@DevCheck
async def get_form(message: types.Message, state: FSMContext):
    await message.answer('!–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞!',
                         reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞')
    await state.set_state(SaveSteps.GET_NAME)


@CancelActivity
async def get_name(message: types.Message, state: FSMContext):
    contex_data = await state.get_data()
    name = contex_data.get('name')

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞\n<b>–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã</b>', reply_markup=get_quit())
    if name:
        pass
    else:
        await state.update_data(name=message.text)
    await state.set_state(SaveSteps.GET_VOLTAGE)

@CancelActivity
async def get_voltage(message: types.Message, state: FSMContext):
    try:
        int(message.text)
        await state.update_data(voltage=abs(int(message.text)))
        await state.set_state(SaveSteps.GET_LINK)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫',
                             reply_markup=get_quit())
    except ValueError:
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
        await get_name(message, state)

@CancelActivity
async def get_link(message: types.Message, state: FSMContext):
    contex_data = await state.get_data()
    link = contex_data.get('link')

    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞\n<b>–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã</b>', reply_markup=get_quit())
    if link:
        pass
    else:
        await state.update_data(link=message.text)
    await state.set_state(SaveSteps.GET_COST)

@CancelActivity
async def get_cost(message: types.Message, state: FSMContext):
    contex_data = await state.get_data()
    cost = contex_data.get('cost')

    if cost:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞', reply_markup=get_keyboard_1lvl_branch())
        await state.set_state(SaveSteps.GET_CATEGORY_1LVL)
    else:
        try:
            int(message.text.lower())
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞', reply_markup=get_keyboard_1lvl_branch())
            await state.update_data(cost=abs(int(message.text)))
            await state.set_state(SaveSteps.GET_CATEGORY_1LVL)
        except ValueError:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
            await get_link(message, state)

async def get_category_1lvl(message: types.Message, state: FSMContext):
    if SubCategory.get(message.text):
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=get_keyboard_2lvl_branch(message.text))
        await state.update_data(category_1lvl=message.text)
        await state.set_state(SaveSteps.GET_CATEGORY_2LVL)
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–Ω–æ–ø–∫–µ!')
        await get_cost(message, state)

async def get_category_2lvl(message: types.Message, state: FSMContext):
    await state.update_data(category_2lvl=message.text)
    context_data = await state.get_data()
    await state.update_data(category=context_data.get('category_1lvl') + '_' + context_data.get('category_2lvl'))

    context_data = await state.get_data()
    is_update = context_data.get('update')
    name = context_data.get('name')
    voltage = context_data.get('voltage')
    cost = context_data.get('cost')
    link = context_data.get('link')
    category = context_data.get('category')

    await message.answer(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞:\n\n'
                         f'–ù–∞–∑–≤–∞–Ω–∏–µ - <code>{name}</code>\n'
                         f'–ú–æ—â–Ω–æ—Å—Ç—å - {voltage} W(–í—Ç)\n'
                         f'–°—Å—ã–ª–∫–∞ - {link}\n'
                         f'–°—Ç–æ–∏–º–æ—Å—Ç—å - {cost}‚ÇΩ\n'
                         f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è - {category}\n\n'
                         f'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏?', reply_markup=get_keyboard_ADDLAMP_DELETE_EDIT_FORDEVS())

    if is_update:
        await state.set_state(SaveSteps.GET_UPDATE)
    else:
        await state.set_state(SaveSteps.GET_ACTIVITY)

async def get_activity(message: types.Message, state: FSMContext):
    context_data = await state.get_data()
    name = context_data.get('name')
    voltage = context_data.get('voltage')
    cost = context_data.get('cost')
    link = context_data.get('link')
    category = context_data.get('category')


    if message.text.lower() == '–¥–∞':

        check = db.lamp_exists(name)
        if check:
            await message.answer(f'–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:\n{name}',
                                 reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
            await state.clear()
        else:
            db.add_lamp(name, voltage, cost, link, category)
            await message.answer(f'–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!',
                                 reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
            await state.clear()

    elif message.text.lower() == '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–µ—Å—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ':

        await get_form(message, state)

    elif message.text.lower() == '–æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ':

        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
                             reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
        await state.clear()

    else:
        await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
                             reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
        await state.clear()



"""edit"""
async def get_name_edit(message: types.Message, state: FSMContext):
    context_data = await state.get_data()
    source = context_data.get('source')
    if source:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞',
                             reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
        await state.set_state(SaveSteps.EDIT_NAME)
    else:
        if message.text.lower() == '–Ω–∞–∑–≤–∞–Ω–∏–µ':
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞',
                                 reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
            await state.update_data(source='get_name_edit')
            await state.set_state(SaveSteps.EDIT_NAME)

async def edit_name(message: types.Message, state: FSMContext):
    await state.update_data(edit=message.text)
    context_data = await state.get_data()
    name = context_data.get('edit')
    await message.answer(f'–ò–∑–º–µ–Ω—ë–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä:\n–ù–∞–∑–≤–∞–Ω–∏–µ - <code>{name}</code>\n\n–ü—Ä–∏–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?',
                         reply_markup=get_keyboard_ADDLAMP_DELETE_EDIT_FORDEVS())
    await state.set_state(SaveSteps.GET_CONFIRM_EDITS)

async def get_voltage_edit(message: types.Message, state: FSMContext):
    context_data = await state.get_data()
    source = context_data.get('source')
    if source:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–æ—â–Ω–æ—Å—Ç—å —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞',
                             reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
        await state.set_state(SaveSteps.EDIT_VOLTAGE)
    else:
        if message.text.lower() == '–º–æ—â–Ω–æ—Å—Ç—å':
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–æ—â–Ω–æ—Å—Ç—å —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞',
                                 reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
            await state.update_data(source='get_voltage_edit')
            await state.set_state(SaveSteps.EDIT_VOLTAGE)

async def edit_voltage(message: types.Message, state: FSMContext):
    try:
        int(message.text)
        await state.update_data(edit=abs(int(message.text)))
        context_data = await state.get_data()
        voltage = context_data.get('edit')
        await message.answer(f'–ò–∑–º–µ–Ω—ë–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä:\n–ú–æ—â–Ω–æ—Å—Ç—å: {voltage}W\n\n–ü—Ä–∏–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?',
                             reply_markup=get_keyboard_ADDLAMP_DELETE_EDIT_FORDEVS())
        await state.set_state(SaveSteps.GET_CONFIRM_EDITS)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        await state.set_state(SaveSteps.GET_VOLTAGE_EDIT)
        await get_voltage_edit(message, state)

async def get_cost_edit(message: types.Message, state: FSMContext):
    context_data = await state.get_data()
    source = context_data.get('source')
    if source:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞',
                             reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
        await state.set_state(SaveSteps.EDIT_COST)
    else:
        if message.text.lower() == '—Å—Ç–æ–∏–º–æ—Å—Ç—å':
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞',
                                 reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
            await state.update_data(source='get_cost_edit')
            await state.set_state(SaveSteps.EDIT_COST)

async def edit_cost(message: types.Message, state: FSMContext):
    try:
        int(message.text)
        await state.update_data(edit=abs(int(message.text)))
        context_data = await state.get_data()
        cost = context_data.get('edit')
        await message.answer(f'–ò–∑–º–µ–Ω—ë–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä:\n–°—Ç–æ–∏–º–æ—Å—Ç—å - {cost}‚ÇΩ\n\n–ü—Ä–∏–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?',
                             reply_markup=get_keyboard_ADDLAMP_DELETE_EDIT_FORDEVS())
        await state.set_state(SaveSteps.GET_CONFIRM_EDITS)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        await state.set_state(SaveSteps.GET_VOLTAGE_EDIT)
        await get_voltage_edit(message, state)
async def get_link_edit(message: types.Message, state: FSMContext):
    context_data = await state.get_data()
    source = context_data.get('source')
    if source:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫',
                             reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
        await state.set_state(SaveSteps.EDIT_LINK)
    else:
        if message.text.lower() == '—Å—Å—ã–ª–∫–∞':
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫',
                                 reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
            await state.update_data(source='get_link_edit')
            await state.set_state(SaveSteps.EDIT_LINK)

async def edit_link(message: types.Message, state: FSMContext):
    await state.update_data(edit=message.text)
    context_data = await state.get_data()
    link = context_data.get('edit')
    await message.answer(f'–ò–∑–º–µ–Ω—ë–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä:\n–°—Å—ã–ª–∫–∞: {link}\n\n–ü—Ä–∏–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?',
                         reply_markup=get_keyboard_ADDLAMP_DELETE_EDIT_FORDEVS())
    await state.set_state(SaveSteps.GET_CONFIRM_EDITS)

async def get_category_edit(message: types.Message, state: FSMContext):
    context_data = await state.get_data()
    source = context_data.get('source')
    if source:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=get_keyboard_1lvl_branch())
        await state.set_state(SaveSteps.GET_CATEGORY_LITE1)
    else:
        if message.text.lower() == '–∫–∞—Ç–µ–≥–æ—Ä–∏—è':
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=get_keyboard_1lvl_branch())
            await state.update_data(source='get_category_edit')
            await state.set_state(SaveSteps.GET_CATEGORY_LITE1)

        else:
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–Ω–æ–ø–∫–µ!')
            await get_category_edit(message, state)
async def get_category_LITE1(message: types.Message, state: FSMContext):
    if SubCategory.get(message.text):
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=get_keyboard_2lvl_branch(message.text))
        await state.update_data(category_lite1=message.text)
        await state.set_state(SaveSteps.GET_CATEGORY_LITE2)
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–Ω–æ–ø–∫–µ!')
        await get_category_edit(message, state)
async def get_category_LITE2(message: types.Message, state: FSMContext):
    await state.update_data(category_lite2=message.text)
    context_data = await state.get_data()
    await state.update_data(edit=context_data.get('category_lite1') + '_' + context_data.get('category_lite2'))
    context_data = await state.get_data()
    category = context_data.get('edit')

    text = f'–ò–∑–º–µ–Ω—ë–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä:\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è - {category}\n\n–ü—Ä–∏–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?'
    await message.answer(text, reply_markup=get_keyboard_ADDLAMP_DELETE_EDIT_FORDEVS())
    await state.set_state(SaveSteps.GET_CONFIRM_EDITS)


'''edit_head'''
async def get_confirm_edits(message: types.Message, state: FSMContext):
    if message.text.lower() == '–¥–∞':

        context_data = await state.get_data()
        param = context_data.get('edit')
        column = context_data.get('column')
        name = context_data.get('old_name')
        db.update_attr(column, param, name)
        await message.answer(f'–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!', reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
        await state.clear()

    elif message.text.lower() == '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–µ—Å—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ':

        context_data = await state.get_data()
        functions = {
            'get_name_edit': get_name_edit,
            'get_voltage_edit': get_voltage_edit,
            'get_cost_edit': get_cost_edit,
            'get_link_edit': get_link_edit,
            'get_category_edit': get_category_edit
        }
        func = functions[context_data.get('source')]
        await func(message, state)

    elif message.text.lower() == '–æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ':

        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
                             reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
        await state.clear()

    else:
        await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
                             reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
        await state.clear()


"""/search"""
async def search_lamp(message: types.Message, state: FSMContext):
    await message.answer('!–ü–æ–∏—Å–∫ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!')
    await state.clear()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ <u><i>—á–∞—Å—Ç–∏—á–Ω–æ–µ/–ø–æ–ª–Ω–æ–µ</i></u> –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞\n–°–º. /search_help',
                         reply_markup=get_quit())
    await state.set_state(SaveSteps.GET_SEARCH)

@CancelActivity
async def search_result(message: types.Message, state: FSMContext):
    await state.update_data(search_name=message.text)
    context_data = await state.get_data()
    search_name = context_data.get('search_name')

    request = ""
    for char in range(len(search_name)):
        if re.match(r'[a-zA-Z]', search_name[char]):
            request += search_name[char].upper()

    search = search_name
    if 2 < len(request) < 5:
        search = request

    more = context_data.get('current_search')
    if more:
        current = more
    else:
        current = 1
    res = await db.search_lamp(search, current, search)

    if bool(len(res[0])):
        text = ''
        search_info = res[0]
        last = res[1]
        for i in range(len(search_info)):
            text += (f'\n<b>ID - {search_info[i][0]}</b>\n'
                     f'      –ù–∞–∑–≤–∞–Ω–∏–µ - <code>{search_info[i][1]}</code>\n'
                     f'      –ú–æ—â–Ω–æ—Å—Ç—å - {search_info[i][2]} W | –í—Ç\n'
                     f'      –°—Ç–æ–∏–º–æ—Å—Ç—å - {search_info[i][3]}‚ÇΩ\n'
                     f'      –°—Å—ã–ª–∫–∞ - {search_info[i][4]}\n')
            category = search_info[i][5]
            category_lvl2 = category.split('_')[0]
            category_lvl3 = category.split('_')[1]
            category = SubCategoryFormat[category_lvl2] + ' --> ' + category_lvl3
            text += f'      –ö–∞—Ç–µ–≥–æ—Ä–∏—è - {category}'

        await message.answer(text, reply_markup=get_keyboard_SEARCH(last))
    else:
        await message.answer(f'–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏ —Å –∏–º–µ–Ω–µ–º `{message.text}` –Ω–µ –Ω–∞–π–¥–µ–Ω—ã/–±—ã–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫–∞–∑–∞–Ω—ã')
    await state.clear()
    await state.update_data(current_search=current + 1, message=message)


"""/delete_lamp"""
@DevCheck
async def delete_lamp(message: types.Message, state: FSMContext):
    await message.answer('!–£–¥–∞–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞!', reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
    await message.answer('–í–≤–µ–¥–∏—Ç–µ <b>–ø–æ–ª–Ω–æ–µ</b> –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞')
    await state.set_state(SaveSteps.GET_DELETE)

async def delete_res(message: types.Message, state: FSMContext):
    await state.update_data(name_delete=message.text)
    context_data = await state.get_data()
    name = context_data.get('name_delete')
    next_step = db.lamp_exists(name)

    if next_step:
        res = db.get_lamp(name)
        await message.answer(f'ID - {res[0][0]}\n'
                             f'–ù–∞–∑–≤–∞–Ω–∏–µ - <code>{res[0][1]}</code>\n'
                             f'–ú–æ—â–Ω–æ—Å—Ç—å - {res[0][2]} W\n'
                             f'–°—Ç–æ–∏–º–æ—Å—Ç—å - {res[0][3]}‚ÇΩ\n'
                             f'–°—Å—ã–ª–∫–∞ - {res[0][4]}\n'
                             f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è - {res[0][5]}\n\n'
                             f'–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å?', reply_markup=get_keyboard_ADDLAMP_DELETE_EDIT_FORDEVS())
        await state.set_state(SaveSteps.GET_ACTIVITY_DELETE)

    else:
        await message.answer('–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        await state.clear()

async def get_activity_delete(message: types.Message, state: FSMContext):
    if message.text.lower() == '–¥–∞':

        await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=get_keyboard_CONFIRM())
        await state.set_state(SaveSteps.GET_CONFIRM)

    elif message.text.lower() == '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–µ—Å—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ':

        await delete_lamp(message, state)

    elif message.text.lower() == '–æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ':

        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
                             reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
        await state.clear()

    else:
        await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
                             reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
        await state.clear()

async def get_confirmation(message: types.Message, state: FSMContext):
    if message.text.lower() == '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        context_data = await state.get_data()
        name = context_data.get('name_delete')

        db.lamp_delete(name)
        await message.answer('–ó–∞–ø–∏—Å—å –æ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!',
                             reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))

    elif message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))

    else:
        await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
                             reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))

    await state.clear()



"""/update_lamp"""
@DevCheck
async def get_update_lamp(message: types.Message, state: FSMContext):
    await message.answer('!–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏ –æ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–µ!',
                         reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
    await message.answer('–í–≤–µ–¥–∏—Ç–µ <b>–ø–æ–ª–Ω–æ–µ</b> –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞')
    await state.set_state(SaveSteps.SEARCH_NAME)

@CancelActivity
async def search_name(message: types.Message, state: FSMContext):
    if db.lamp_exists(message.text):
        res = db.get_lamp(message.text)
        await message.answer('–ó–∞–ø–∏—Å—å –æ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–µ –Ω–∞–π–¥–µ–Ω–∞:\n\n'
                             f'ID - {res[0][0]}\n'
                             f'–ù–∞–∑–≤–∞–Ω–∏–µ - <code>{res[0][1]}</code>\n'
                             f'–ú–æ—â–Ω–æ—Å—Ç—å - {res[0][2]} W\n'
                             f'–°—Ç–æ–∏–º–æ—Å—Ç—å - {res[0][3]}‚ÇΩ\n'
                             f'–°—Å—ã–ª–∫–∞ - {res[0][4]}\n'
                             f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è - {res[0][5]}\n\n'
                             f'–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∑–∞–ø–∏—Å–∏ –æ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–µ?', reply_markup=get_keyboard_UPDATE_FORDEVS())
        await state.update_data(old_name=res[0][1])
        await state.set_state(SaveSteps.GET_NEW_NAME)
    else:
        await message.answer('–ó–∞–ø–∏—Å—å –æ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n'
                             '–ü–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /search',
                             reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
        await state.clear()

"""–ê–ø–¥–µ–π—Ç –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
async def get_edit(message: types.Message, state: FSMContext):
    await message.answer('!–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞!', reply_markup=add_attr())
    await state.set_state(SaveSteps.EDIT_ATTR)
async def edit_attr(message: types.Message, state: FSMContext):
    states_funcs = {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": (get_name_edit, SaveSteps.GET_NAME_EDIT),
        "–º–æ—â–Ω–æ—Å—Ç—å": (get_voltage_edit, SaveSteps.GET_VOLTAGE_EDIT),
        "—Å—Ç–æ–∏–º–æ—Å—Ç—å": (get_cost_edit, SaveSteps.GET_COST_EDIT),
        "—Å—Å—ã–ª–∫–∞": (get_link_edit, SaveSteps.GET_LINK_EDIT),
        "–∫–∞—Ç–µ–≥–æ—Ä–∏—è": (get_category_edit, SaveSteps.GET_PRED_EDIT)
    }
    columns = {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": 'name',
        "–º–æ—â–Ω–æ—Å—Ç—å": 'voltage',
        "—Å—Ç–æ–∏–º–æ—Å—Ç—å": 'cost',
        "—Å—Å—ã–ª–∫–∞": 'link',
        "–∫–∞—Ç–µ–≥–æ—Ä–∏—è": 'category'
    }
    mes = message.text.lower()
    if mes in columns.keys():
        for attr in columns.keys():
            if attr == mes:
                await state.update_data(column=columns[mes])
                func = states_funcs[mes][0]
                state_name = states_funcs[mes][1]
                await state.set_state(state_name)
                await func(message, state)

    else:
        await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä\n–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
        await state.clear()



async def get_new_name(message: types.Message, state: FSMContext):
    if message.text.lower() == '–¥–∞':

        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞',
                             reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
        await state.update_data(update='1')
        await state.set_state(SaveSteps.GET_NEW_NAME2)

    elif message.text.lower() == '–∏–∑–º–µ–Ω–∏—Ç—å –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä':

        await get_edit(message, state)

    elif message.text.lower() == '–æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ':

        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
                             reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
        await state.clear()

    else:
        await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
                             reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
        await state.clear()

async def get_activity_update(message: types.Message, state: FSMContext):
    context_data = await state.get_data()
    name = context_data.get('name')
    voltage = context_data.get('voltage')
    cost = context_data.get('cost')
    link = context_data.get('link')
    category = context_data.get('category')
    old_name = context_data.get('old_name')


    if message.text.lower() == '–¥–∞':
        db.update_lamp(name, voltage, cost, link, category, old_name)
        await message.answer('–ó–∞–ø–∏—Å—å –æ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!',
                             reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
        await state.clear()

    elif message.text.lower() == '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–µ—Å—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ':

        await get_update_lamp(message, state)

    elif message.text.lower() == '–æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ':

        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
                             reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
        await state.clear()

    else:
        await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
                             reply_markup=types.ReplyKeyboardRemove(remove_keyboard=True))
        await state.clear()


"""/id"""
async def show_id(message: types.Message):
    await message.answer(f'–í–∞—à id:\n'
                         f'<code>{message.from_user.id}</code>')


'''/profile'''
@DevCheck
async def show_profile(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
    await state.set_state(SaveSteps.GET_ID)

async def answer_profile(message: types.Message, state: FSMContext):
    try:
        int(message.text)
        id = abs(int(message.text))
        await message.answer(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=profile(str(id)))

    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π id')
    except TelegramBadRequest:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π id')

    await state.clear()
